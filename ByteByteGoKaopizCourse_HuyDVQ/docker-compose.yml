services:
  # MySQL Master Database
  mysql-master:
    image: mysql:8.0
    container_name: mysql_master
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: loadbalancer_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD: replicator_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./mysql/master/my.cnf:/etc/mysql/my.cnf
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --server-id=1 --log-bin=mysql-bin --binlog-format=ROW --gtid-mode=ON --enforce-gtid-consistency=ON
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL Slave Database 1
  mysql-slave1:
    image: mysql:8.0
    container_name: mysql_slave1
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: loadbalancer_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_MASTER_HOST: mysql-master
      MYSQL_MASTER_USER: replicator
      MYSQL_MASTER_PASSWORD: replicator_password
      MYSQL_MASTER_PORT: 3306
    ports:
      - "3307:3306"
    volumes:
      - mysql_slave1_data:/var/lib/mysql
      - ./mysql/slave1/my.cnf:/etc/mysql/my.cnf
    command: --server-id=2 --relay-log=mysql-relay-bin --log-slave-updates=1 --read-only=1
    depends_on:
      mysql-master:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL Slave Database 2
  mysql-slave2:
    image: mysql:8.0
    container_name: mysql_slave2
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: loadbalancer_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_MASTER_HOST: mysql-master
      MYSQL_MASTER_USER: replicator
      MYSQL_MASTER_PASSWORD: replicator_password
      MYSQL_MASTER_PORT: 3306
    ports:
      - "3308:3306"
    volumes:
      - mysql_slave2_data:/var/lib/mysql
      - ./mysql/slave2/my.cnf:/etc/mysql/my.cnf
    command: --server-id=3 --relay-log=mysql-relay-bin --log-slave-updates=1 --read-only=1
    depends_on:
      mysql-master:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Server 1
  backend1:
    build: ./backend
    container_name: backend_1
    environment:
      NODE_ENV: production
      DB_MASTER_HOST: mysql-master
      DB_SLAVE1_HOST: mysql-slave1
      DB_SLAVE2_HOST: mysql-slave2
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: loadbalancer_db
      SERVER_ID: 1
    ports:
      - "3001:3000"
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave1:
        condition: service_healthy
      mysql-slave2:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # Backend Server 2
  backend2:
    build: ./backend
    container_name: backend_2
    environment:
      NODE_ENV: production
      DB_MASTER_HOST: mysql-master
      DB_SLAVE1_HOST: mysql-slave1
      DB_SLAVE2_HOST: mysql-slave2
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: loadbalancer_db
      SERVER_ID: 2
    ports:
      - "3002:3000"
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave1:
        condition: service_healthy
      mysql-slave2:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # Backend Server 3
  backend3:
    build: ./backend
    container_name: backend_3
    environment:
      NODE_ENV: production
      DB_MASTER_HOST: mysql-master
      DB_SLAVE1_HOST: mysql-slave1
      DB_SLAVE2_HOST: mysql-slave2
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: loadbalancer_db
      SERVER_ID: 3
    ports:
      - "3003:3000"
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave1:
        condition: service_healthy
      mysql-slave2:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  # Load Balancer
  loadbalancer:
    build: ./loadbalancer
    container_name: nginx_lb
    ports:
      - "8080:8080"
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - app_network
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: nginx_frontend
    ports:
      - "80:80"
    depends_on:
      - backend1
      - backend2
      - backend3
      - loadbalancer
    networks:
      - app_network
    restart: unless-stopped

volumes:
  mysql_master_data:
  mysql_slave1_data:
  mysql_slave2_data:

networks:
  app_network:
    driver: bridge